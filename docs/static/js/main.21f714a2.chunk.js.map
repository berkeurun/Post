{"version":3,"sources":["features/posts/postsSlice.js","features/posts/AddPostForm.jsx","features/posts/PostsList.jsx","App.js","app/store.js","index.js"],"names":["postsSlice","createSlice","name","initialState","reducers","postAdded","state","action","push","payload","actions","AddPostForm","useState","title","setTitle","content","setContent","dispatch","useDispatch","htmlFor","type","id","value","onChange","e","target","color","onClick","post","nanoid","PostsList","renderedPosts","useSelector","posts","map","className","substring","App","exact","path","render","Fragment","to","configureStore","reducer","postsReducer","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"mOAKMA,EAAaC,YAAY,CAC3BC,KAAM,QACNC,aALiB,GAMjBC,SAAS,CACLC,UADK,SACKC,EAAOC,GACbD,EAAME,KAAKD,EAAOE,aAKfJ,EAAcL,EAAWU,QAAzBL,UACAL,IAAf,Q,OCVaW,EAAc,WACvB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA6BF,mBAAS,IAAtC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAWC,cAejB,OACI,oCACI,sCACJ,iCACI,uBAAOC,QAAQ,YAAf,yBACA,uBACAC,KAAK,OACLC,GAAG,YACHnB,KAAK,YACToB,MAAOT,EACPU,SAAU,SAAAC,GAAC,OAAIV,EAASU,EAAEC,OAAOH,UAE7B,uBAAOH,QAAQ,cAAf,mBACA,0BACAE,GAAG,cACHnB,KAAK,cACRoB,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAOR,EAAWQ,EAAEC,OAAOH,UAElC,wBAAQI,MAAM,SAASN,KAAK,SAASO,QAhC3B,SAAAC,GACXf,GAASE,IACRE,EAASZ,EAAU,CACfgB,GAAIQ,cACJhB,QACAE,aAGJD,EAAS,IACTE,EAAW,MAuBX,yBCxCCc,EAAY,WACrB,IAEMC,EAFQC,aAAY,SAAA1B,GAAK,OAAIA,EAAM2B,SAEbC,KAAI,SAAAN,GAAI,OAChC,0BAASO,UAAU,eAAnB,UACI,6BAAKP,EAAKf,QACV,4BAAG,+BAAOe,EAAKb,QAAQqB,UAAU,EAAG,WAFDR,EAAKP,OAKpD,OACI,oCACI,uCACCU,M,MCkBMM,MAtBf,WACE,OACE,cAAC,IAAD,UACE,qBAAKF,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CACAG,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACP,eAAC,IAAMC,SAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,UAIH,cAAC,IAAD,CAAUC,GAAG,cCxBRC,cAAe,CAC1BC,QAAS,CACLX,MAAOY,KCEfC,IAASN,OACP,cAAC,IAAMO,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.21f714a2.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState = [\r\n]\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers:{\r\n        postAdded(state, action) {\r\n            state.push(action.payload)\r\n        }\r\n    }\r\n});\r\n\r\nexport const { postAdded } = postsSlice.actions;\r\nexport default postsSlice.reducer;","import React, { useState } from \"react\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { nanoid } from '@reduxjs/toolkit'\r\nimport { postAdded } from \"./postsSlice\"\r\nimport { Button } from 'reactstrap';\r\n\r\nexport const AddPostForm = () => {\r\n    const [title, setTitle] = useState('')\r\n    const [content,setContent] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const SavePost =  post => {\r\n        if(title && content) {\r\n            dispatch(postAdded({\r\n                id: nanoid(),\r\n                title,\r\n                content\r\n            }))\r\n\r\n            setTitle('')\r\n            setContent('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2>Post</h2>\r\n        <form>\r\n            <label htmlFor=\"postTitle\">Post Title:</label>\r\n            <input\r\n            type=\"text\"\r\n            id=\"postTitle\"\r\n            name=\"postTitle\"\r\n        value={title}\r\n        onChange={e => setTitle(e.target.value)}\r\n            />\r\n            <label htmlFor=\"postContent\">Post:</label>\r\n            <textarea\r\n            id=\"postContent\"\r\n            name=\"postContent\"\r\n         value={content}\r\n         onChange={(e) => setContent(e.target.value)}\r\n            />\r\n            <button color=\"danger\" type=\"button\" onClick={SavePost}>Edit</button>\r\n        \r\n        </form>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\nexport const PostsList = () => {\r\n    const posts = useSelector(state => state.posts);\r\n\r\n    const renderedPosts = posts.map(post => (\r\n        <article className=\"post-excerpt\" key={post.id}>\r\n            <h3>{post.title}</h3>\r\n            <p><post>{post.content.substring(0, 100)}</post></p>\r\n        </article>\r\n    ))\r\nreturn (\r\n    <section>\r\n        <h2>Posts</h2>\r\n        {renderedPosts}\r\n    </section>\r\n    );\r\n}","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom'\r\n\r\nimport { AddPostForm } from './features/posts/AddPostForm';\r\nimport { PostsList } from './features/posts/PostsList';\r\nimport './App.css';\r\n\r\nfunction App()  {\r\n  return(\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n           <React.Fragment>\r\n             <AddPostForm />\r\n             <PostsList />\r\n           </React.Fragment>\r\n          )}\r\n          />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport postsReducer from '../features/posts/postsSlice'\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        posts: postsReducer,\r\n    },\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}